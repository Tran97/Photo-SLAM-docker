# Stage 1: Use a pre-built OpenCV image with CUDA support
FROM t4dashi/opencv-cuda:11.4.0-jetpack AS opencv_base

# Stage 2: Final Image
FROM nvcr.io/nvidia/l4t-cuda:11.4.19-runtime AS dev

#SHELL ["/bin/bash", "-c"]

# Copy only the necessary OpenCV artifacts from the build stage
#COPY --from=opencv_base /usr/local /usr/local
COPY --from=opencv_base /usr/local/lib /usr/local/lib
COPY --from=opencv_base /usr/local/include /usr/local/include
COPY --from=opencv_base /usr/local/bin /usr/local/bin

RUN apt-get update && apt-get install -y \
    software-properties-common \
    wget

# gcc
RUN add-apt-repository ppa:ubuntu-toolchain-r/test -y

RUN apt-get install -y gcc-11 g++-11

RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100


# dependency
RUN apt-get install -y \
    git \
    build-essential \
    sudo \
    curl \
    zip \
    libeigen3-dev \
    libboost-all-dev \
    libjsoncpp-dev \
    libopengl-dev \
    mesa-utils \
    libglfw3-dev \
    libglm-dev \
    python3-pip \
    python3-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libswresample-dev \
    libssl-dev \
    libopenblas-dev \
    && rm -rf /var/lib/apt/lists/*

# libtorch
RUN python3 -m pip install --upgrade pip && \
    export TORCH_INSTALL=https://developer.download.nvidia.cn/compute/redist/jp/v511/pytorch/torch-2.0.0+nv23.05-cp38-cp38-linux_aarch64.whl && \
    python3 -m pip install --no-cache-dir $TORCH_INSTALL
#ENV Torch_DIR /libtorch/share/cmake/Torch

# Install CMake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4.tar.gz && \
    tar -xvf cmake-3.26.4.tar.gz && cd cmake-3.26.4 && \
    ./bootstrap && make -j$(nproc) && make install && \
    cd .. && rm -rf cmake-3.26.4 cmake-3.26.4.tar.gz

# Install cuda and cudnn
RUN apt-get update && apt-get install -y \
    libcudnn8-dev \
    cuda-toolkit-11-4 \
    build-essential \
    cmake \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

COPY . /dev_ws/Photo-SLAM 
WORKDIR /dev_ws/Photo-SLAM

# Dev container arguments
ARG USERNAME=devuser
ARG UID=2000
ARG GID=${UID}

# Install extra tools for development
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    sudo \
    clangd \
    gdb \
    gdbserver \
    && apt clean && rm -rf /var/lib/apt/lists/*

# Create the sudoers directory
RUN mkdir -p /etc/sudoers.d

# Create new user and home directory
RUN groupadd --gid $GID $USERNAME \
    && useradd --uid ${GID} --gid ${UID} --create-home ${USERNAME} \
    && echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME} \
    && chmod 0440 /etc/sudoers.d/${USERNAME} \
    && mkdir -p /home/${USERNAME} \
    && chown -R ${UID}:${GID} /home/${USERNAME} \
    && chown -R ${UID}:${GID} /dev_ws

# Set the user
USER ${USERNAME}

# Set environment variables
ENV Torch_DIR /usr/local/lib/python3.8/dist-packages/torch/share/cmake/Torch
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# Build the project
RUN ./build.sh
